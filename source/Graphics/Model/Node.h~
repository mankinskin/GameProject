#pragma once
#include <vector>
#include <glm\glm.hpp>

//node
//node hold the information about the transformation of an object. They store a position, an orientation and a scale.
namespace node {

	void initNodeBuffers();
	void updateNodeBuffers();

    void updateNodeMatrices();
    void createNodes(size_t pCount, size_t* pnode);
	void createNode(size_t* pNode);
    void newNodeID(size_t & pNode);

    void setScale(size_t pNodeID, glm::vec3 pScale);
    void setPos(size_t pNodeID, glm::vec3 pPos);
    void translate(size_t pNodeID, glm::vec3 pPos);
	extern size_t nodeMatrixBuffer;
	
    const size_t MAX_NODES = 10000;
    extern size_t num_nodes;

    extern std::vector<glm::vec3> allPositions;
	extern std::vector<glm::vec3> allNormals;
    extern std::vector<glm::vec3> allScales;
    extern std::vector<glm::mat4> allMatrices;


}